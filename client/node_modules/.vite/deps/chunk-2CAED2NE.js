import {
  useVariantColor
} from "./chunk-QX6DWFHE.js";
import {
  StyledListItemButton
} from "./chunk-MPFOXH35.js";
import {
  ListItemButtonOrientationContext_default
} from "./chunk-WGVXT66Y.js";
import {
  RowListContext_default
} from "./chunk-PS7QTPUM.js";
import {
  useMenuItem,
  useMenuItemContextStabilizer
} from "./chunk-HIXLZXZV.js";
import {
  ListContext
} from "./chunk-VKUUBBFN.js";
import {
  useSlot
} from "./chunk-JYTFLYMU.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-GDJPOJOC.js";
import {
  composeClasses
} from "./chunk-EMN3HH23.js";
import {
  capitalize,
  generateUtilityClass2 as generateUtilityClass,
  generateUtilityClasses2 as generateUtilityClasses
} from "./chunk-NZ25ZWZO.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-YR5LAKKR.js";
import {
  _extends,
  init_extends,
  require_prop_types
} from "./chunk-24XY6HD4.js";
import {
  require_jsx_runtime
} from "./chunk-NRBATONI.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@mui/joy/MenuItem/MenuItem.js
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/joy/MenuItem/menuItemClasses.js
function getMenuItemUtilityClass(slot) {
  return generateUtilityClass("MuiMenuItem", slot);
}
var menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "disabled", "selected", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var menuItemClasses_default = menuItemClasses;

// node_modules/@mui/joy/MenuItem/MenuItem.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["children", "disabled", "component", "selected", "color", "orientation", "variant", "slots", "slotProps", "id"];
var useUtilityClasses = (ownerState) => {
  const {
    focusVisible,
    disabled,
    selected,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", focusVisible && "focusVisible", disabled && "disabled", selected && "selected", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, {});
  return composedClasses;
};
var MenuItemRoot = styled_default(StyledListItemButton, {
  name: "JoyMenuItem",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var MenuItem = React.memo(React.forwardRef(function MenuItem2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenuItem"
  });
  const row = React.useContext(RowListContext_default);
  const {
    children,
    disabled: disabledProp = false,
    component = "li",
    selected = false,
    color: colorProp = "neutral",
    orientation = "horizontal",
    variant: variantProp = "plain",
    slots = {},
    slotProps = {},
    id
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    variant = variantProp,
    color = colorProp
  } = useVariantColor(inProps.variant, inProps.color);
  const {
    getRootProps,
    disabled,
    focusVisible
  } = useMenuItem({
    id,
    disabled: disabledProp,
    rootRef: ref
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disabled,
    focusVisible,
    orientation,
    selected,
    row,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: MenuItemRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
}));
var StableMenuItem = React.forwardRef(function StableMenuItem2(props, ref) {
  const {
    contextValue,
    id
  } = useMenuItemContextStabilizer(props.id);
  return (0, import_jsx_runtime.jsx)(ListContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime.jsx)(MenuItem, _extends({}, props, {
      id,
      ref
    }))
  });
});
true ? StableMenuItem.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  id: import_prop_types.default.string
} : void 0;
var MenuItem_default = StableMenuItem;

export {
  getMenuItemUtilityClass,
  menuItemClasses_default,
  MenuItem_default
};
//# sourceMappingURL=chunk-2CAED2NE.js.map
